# Configuracoes do banco de dados
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# Configuracoes do Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=true
logging.level.org.hibernate.SQL=DEBUG

# Configuracoes da aplicacao
server.error.include-stacktrace=on_param
server.port=${PORT}
spring.jpa.hibernate.ddl-auto=create

# Spring security
spring.profiles.active=development
api.security.token.secret=${JWT_SECRET:1234}

# Servico de e-mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
#E-mail personniMoveis
spring.mail.username=personnimoveis@gmail.com
# Senha de aplicacao para que api do google autorize envio de e-mails (removida agora que o projeto esta em um repositorio aberto).
spring.mail.password=#senha removida
spring.mail.properties.mail.smtp.auth=true
# STARTTLS criptografa a comunicacao entre o cliente (nossa aplicacao) e o servidor de e-mails (gmail), protegendo os dados durante o transporte.
spring.mail.properties.mail.smtp.starttls.enable=true
# Tempo maximo que o cliente aguarda por uma resposta do servidor de e-mail durante tempo de conexao e tempo de escrita: 5s.
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory