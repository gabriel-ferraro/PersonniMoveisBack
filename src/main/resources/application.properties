# Configuracoes do banco de dados
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# Configuracoes do Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.show-sql=true
# IMPORTANTE - se true, atributo abaixo faz com que a lib jackson carregue
# valores associados a uma entidade que foram mapeados via JPA, por exemplo:
# carrega usu\u00e1rios e todos seus pedidos e endere\u00e7os. \u00c9 mais prop\u00edcio fazer tratativas
# com uso de lazy e JsonIgnore para envio e recebimento de "entidades" nos endpoints.
spring.jpa.open-in-view=true
logging.level.org.hibernate.SQL=DEBUG

# Configuracoes da aplicacao
server.error.include-stacktrace=on_param
server.port=${PORT}

# Spring security
spring.profiles.active=development
spring.security.enabled=false

# Servi\u00e7o de e-mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
#E-mail personniMoveis
spring.mail.username=personnimoveis@gmail.com
# Senha de aplica\u00e7\u00e3o para que api do google autorize envio de e-mails.
spring.mail.password=nzszgltxuasaauok
spring.mail.properties.mail.smtp.auth=true
# STARTTLS criptografa a comunica\u00e7\u00e3o entre o cliente (nossa aplica\u00e7\u00e3o) e o servidor de e-mails (gmail), protegendo os dados durante o transporte.
spring.mail.properties.mail.smtp.starttls.enable=true
# Tempo m\u00e1ximo que o cliente aguardar\u00e1 por uma resposta do servidor de e-mail durante tempo de conex\u00e3o e tempo de escrita: 5s.
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory